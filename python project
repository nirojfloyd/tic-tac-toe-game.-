#GLOBAL declaration
board=[" "," "," "," "," "," "," "," "," "]
winner= None
current_player="X"
game_still_going=True

def play_game():
    
    
  #display the initial board
  display_board()
   


    #while the game is still going
  while game_still_going:

    #take input from the current player
        
    handle_turn(current_player)
    
      #check whether the game has ended or not
    check_if_game_over()
    
      #flip to the other player
    flip_player()
    
    #The game has ended
  if winner=="X" or winner=="O":
    print(winner+'won')
  elif winner=="None":
    print('Tie')


def display_board():
  print(board[0],'|',board[1],'|',board[2])
  print('_________')
  print(board[3],'|',board[4],'|',board[5])
  print('_________') 
  print(board[6],'|',board[7],'|',board[8])


def handle_turn(player):
  print(player + "'s turn.")
  position=input('Choose a number from 1 to 9:')
    
    
  valid=False
  while not valid:
    while position not in ["1","2","3","4","5","6","7","8","9"]:
      position=input('Invalid input.Choose a number from 1 to 9')
            
    position=int(position)-1
      
    
    if board[position]==" ":
      valid=True
    else:
      print('Already filled. Choose another number.')
  board[position]=player
  display_board()
def check_if_game_over():
  check_if_won() 
  check_if_tie()

  
def check_if_tie():
    
  #setting up global varaibles, so that they will be accessible inside the function
  global game_still_going
    
  if " " not in board:
    game_still_going=False
    return True
  else:
    return False     
def check_if_won():
  global winner
    
  row_winner=check_rows()
    
  column_winner=check_columns()
    
  diagonal_winner=check_diagonals()
    
  if row_winner:
    winner = row_winner
  elif column_winner:
    winner = column_winner
  elif diagonal_winner:
    winner = diagonal_winner
  else:
    winner = None
def check_rows():
  #setting up global varaibles, so that they will be accessible inside the function
  global game_still_going
  row1=board[0]==board[1]==board[2]!=" "
  row2=board[3]==board[4]==board[5]!=" "
  row3=board[6]==board[7]==board[8]!=" "
    
    
    #if any row has a match, flag that there is a win and stop while loop from executing
  if row1 or row2 or row3:
    game_still_going=False
        
    #return the winner(X or O)    
  if row1:
    return board[0]
  elif row2:
    return board[3]
  elif row3:
    return board[6]
  else:
    return None 
def check_columns():
  #setting up global varaibles, so that they will be accessible inside the function
  global game_still_going
  column1=board[0]==board[3]==board[6]!=" "
  column2=board[1]==board[4]==board[7]!=" "
  column3=board[2]==board[5]==board[8]!=" "
    
    
  #if any column has a match, flag that there is a win and stop while loop from executing
  if column1 or column2 or column3:
    game_still_going=False
        
  #return the winner(X or O)    
  if column1:
    return board[0]
  elif column2:
    return board[1]
  elif column3:
    return board[2]
  else:
    return None    
def check_diagonals():
    #setting up global varaibles, so that they will be accessible inside the function
  global game_still_going
  diagonal1=board[0]==board[4]==board[8]!=" "
  diagonal2=board[2]==board[4]==board[6]!=" "
    
    
    #if any diagonal has a match, flag that there is a win and stop while loop from executing
  if diagonal1 or diagonal2 :
    game_still_going=False
        
    #return the winner(X or O)    
  if diagonal1:
    return board[0]
  elif diagonal2:
    return board[2]
  else:
    return None    
def flip_player():
    
    #setting up global varaibles, so that they will be accessible inside the function
  global current_player
    
    #changing the player's turn
  if current_player=="X":
    current_player="O"
  elif current_player=="O":
    current_player="X"        
play_game()       
